/*
 * Copyright 2012-2017 Tobi29
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    def kotlinVersion = "1.2.30"
    def scapesEngineBuildVersion = "0.0.6"
    def dokkaVersion = "0.9.15"
    def junitPlatformVersion = "1.0.0"
    def shadowVersion = "2.0.1"

    repositories {
        jcenter()
        maven {
            url "https://dl.bintray.com/kotlin/kotlin-dev"
        }
        maven {
            url "https://jitpack.io"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.github.Tobi29:ScapesEngineBuild:$scapesEngineBuildVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junitPlatformVersion"
        classpath "com.github.jengelman.gradle.plugins:shadow:$shadowVersion"
    }
}

apply plugin: "idea"

allprojects {
    def env = System.getenv()
    if (env.containsKey("VERSION")) {
        version = env["VERSION"]
    } else {
        version = findProperty("build.version")
    }
    group = "com.github.Tobi29.Scapes"

    repositories {
        jcenter()
        maven {
            url "https://dl.bintray.com/kotlin/kotlin-dev"
        }
        maven {
            url "https://dl.bintray.com/jetbrains/spek"
        }
        maven {
            url "https://maven-eclipse.github.io/maven"
        }
        maven {
            url "https://jitpack.io"
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "4.4.1"
    distributionUrl =
            "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}

ext {
    slf4jVersion = "1.7.25"
    spekVersion = "1.1.5"
    swtVersion = "4.6"
    lwjglVersion = "3.1.6"
    log4jVersion = "2.8.1"
    jnaVersion = "4.4.0"
    sqliteJDBCVersion = "3.20.0"
    scapesEngineVersion = "0.0.11"

    slf4jSimple = "org.slf4j:slf4j-simple:$slf4jVersion"
    lwjgl = "org.lwjgl:lwjgl:$lwjglVersion"
    lwjglEGL = "org.lwjgl:lwjgl-egl:$lwjglVersion"
    lwjglGLFW = "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    lwjglOpenAL = "org.lwjgl:lwjgl-openal:$lwjglVersion"
    lwjglOpenGL = "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    lwjglOpenGLES = "org.lwjgl:lwjgl-opengles:$lwjglVersion"
    lwjglSTB = "org.lwjgl:lwjgl-stb:$lwjglVersion"
    lwjglTinyFD = "org.lwjgl:lwjgl-tinyfd:$lwjglVersion"
    spekEngine = "org.jetbrains.spek:spek-junit-platform-engine:$spekVersion"
    jna = "net.java.dev.jna:jna:$jnaVersion"
    swtLinux32 = "org.eclipse.swt:org.eclipse.swt.gtk.linux.x86:$swtVersion"
    swtLinux64 = "org.eclipse.swt:org.eclipse.swt.gtk.linux.x86_64:$swtVersion"
    swtMacOSX =
            "org.eclipse.swt:org.eclipse.swt.cocoa.macosx.x86_64:$swtVersion"
    swtWindows32 = "org.eclipse.swt:org.eclipse.swt.win32.win32.x86:$swtVersion"
    swtWindows64 =
            "org.eclipse.swt:org.eclipse.swt.win32.win32.x86_64:$swtVersion"

    log4jAPI = "org.apache.logging.log4j:log4j-api:$log4jVersion"
    log4jCore = "org.apache.logging.log4j:log4j-core:$log4jVersion"
    log4jSLF4J = "org.apache.logging.log4j:log4j-slf4j-impl:$log4jVersion"

    sqliteJDBC = "org.xerial:sqlite-jdbc:$sqliteJDBCVersion"

    scapesEngine = { module ->
        "com.github.Tobi29.ScapesEngine:${module}:$scapesEngineVersion"
    }
    scapesEngineJVM = { module -> scapesEngine("${module}JVM") }

    scapesEngineApplicationFramework = scapesEngineJVM("ApplicationFramework")
    scapesEngineArgumentParser = scapesEngineJVM("ArgumentParser")
    scapesEngineChronoUtils = scapesEngineJVM("ChronoUtils")
    scapesEngineCoroutines = scapesEngineJVM("Coroutines")
    scapesEngineEngine = scapesEngineJVM("Engine")
    scapesEngineFileSystems = scapesEngineJVM("FileSystems")
    scapesEngineGenerationUtils = scapesEngineJVM("GenerationUtils")
    scapesEngineGraphicsUtils = scapesEngineJVM("GraphicsUtils")
    scapesEngineMariaDB = scapesEngineJVM("MariaDB")
    scapesEngineMathUtils = scapesEngineJVM("MathUtils")
    scapesEnginePlatformIntegration = scapesEngineJVM("PlatformIntegration")
    scapesEngineProfiler = scapesEngineJVM("Profiler")
    scapesEngineServerFramework = scapesEngineJVM("ServerFramework")
    scapesEngineShaderCLike = scapesEngineJVM("ShaderCLike")
    scapesEngineSQLFramework = scapesEngineJVM("SQLFramework")
    scapesEngineSQLite = scapesEngineJVM("SQLite")
    scapesEngineSQLJet = scapesEngineJVM("SQLJet")
    scapesEngineSWTUtils = scapesEngineJVM("SWTUtils")
    scapesEngineUuid = scapesEngineJVM("Uuid")

    scapesEngineTestAssertions = scapesEngineJVM("TestAssertions")

    scapesEngineCodecOGG = scapesEngineJVM("CodecOGG")
    scapesEngineCodecMP3 = scapesEngineJVM("CodecMP3")
    scapesEngineCodecWAV = scapesEngineJVM("CodecWAV")
    scapesEngineGLFWBackend = scapesEngineJVM("GLFWBackend")
    scapesEngineMBeansCPUReader = scapesEngineJVM("MBeansCPUReader")
    scapesEngineNIOFileSystem = scapesEngineJVM("NIOFileSystem")
}

idea {
    module {
        excludeDirs += file(".jreCache")
    }
}
