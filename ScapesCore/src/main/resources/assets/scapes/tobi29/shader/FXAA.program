property Int SCENE_WIDTH;
property Int SCENE_HEIGHT;

uniform 1 Matrix4 uniform_ModelViewProjectionMatrix;
uniform 3 Texture2 uniform_Texture;
uniform 4 Texture2 uniform_Noise;

const Vector3 LUMA = vector3(0.299, 0.587, 0.114);
const Vector2 SCREEN_SIZE = vector2(float(SCENE_WIDTH), float(SCENE_HEIGHT));
const Float FXAA_REDUCE_MIN = 1.0 / 128.0;
const Float FXAA_REDUCE_MUL = 0.25 / 8.0;
const Float FXAA_SPAN_MAX = 8.0;

shader vertex(0 Vector4 attribute_Position,
              2 Vector2 attribute_Texture) {
    varying_Texture = attribute_Texture;
    Vector2 rcpFrame = vector2(1.0) / SCREEN_SIZE;
    varying_PosPos = attribute_Texture - rcpFrame * 0.75;
    out_Position = uniform_ModelViewProjectionMatrix * attribute_Position;
}

shader fragment(Vector2 varying_Texture,
                Vector2 varying_PosPos) {
    Vector2 uv = varying_Texture;
    Vector4 color = vector4(0.0);
    Vector2 rcpFrame = vector2(1.0) / SCREEN_SIZE;

    // FXAA
    Vector3 rgbNW = texture(uniform_Texture, varying_PosPos.xy).rgb;
    Vector3 rgbNE = texture(uniform_Texture,
                            varying_PosPos.xy + vector2(rcpFrame.x, 0.0)).rgb;
    Vector3 rgbSW = texture(uniform_Texture,
                            varying_PosPos.xy + vector2(0.0, rcpFrame.y)).rgb;
    Vector3 rgbSE = texture(uniform_Texture,
                            varying_PosPos.xy + rcpFrame.xy).rgb;
    Vector3 rgbM = texture(uniform_Texture, varying_Texture.xy).rgb;
    Float lumaNW = dot(rgbNW, LUMA);
    Float lumaNE = dot(rgbNE, LUMA);
    Float lumaSW = dot(rgbSW, LUMA);
    Float lumaSE = dot(rgbSE, LUMA);
    Float lumaM = dot(rgbM, LUMA);
    Float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
    Float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
    Vector2 dir;
    dir.x = (lumaSW + lumaSE) - (lumaNW + lumaNE);
    dir.y = (lumaNW + lumaSW) - (lumaNE + lumaSE);
    Float dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) * FXAA_REDUCE_MUL,
                          FXAA_REDUCE_MIN);
    Float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
    dir = min(vector2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),
          max(vector2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
          dir * rcpDirMin)) * rcpFrame.xy;
    Vector3 rgbA = (1.0/2.0) * (
        texture(uniform_Texture, varying_Texture.xy + dir * (1.0/3.0 - 0.5)).rgb +
        texture(uniform_Texture, varying_Texture.xy + dir * (2.0/3.0 - 0.5)).rgb);
    Vector3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
        texture(uniform_Texture, varying_Texture.xy + dir * (-0.5)).rgb +
        texture(uniform_Texture, varying_Texture.xy + dir * (0.5)).rgb);
    Float lumaB = dot(rgbB, LUMA);
    if (lumaB < lumaMin || lumaB > lumaMax) {
        color.rgb = rgbA;
    } else {
        color.rgb = rgbB;
    }

    // Dither
    Vector2 pixel = varying_Texture * SCREEN_SIZE / vector2(512.0);
    color.rgb += texture(uniform_Noise, pixel).rgb / 512.0 + 0.001953125;

    color.a = 1.0;
    out_Color = color;
}

outputs(0 Vector4 out_Color);