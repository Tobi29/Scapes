uniform 1 Matrix4 uniform_ModelViewProjectionMatrix;
uniform 3 Texture2 uniform_Texture;
uniform 4 Float uniform_Alpha;

const Vector3 lumcoeff = vector3(0.299, 0.587, 0.114);
const Float[] blurWeight = $BLUR_WEIGHT;
const Float[] blurOffset = $BLUR_OFFSET;

shader vertex(0 Vector4 attribute_Position) {
    out_Position = uniform_ModelViewProjectionMatrix * attribute_Position;
}

shader fragment() {
    Vector3 color = vector3(0.0);
    for (i in 0 ... $BLUR_LENGTH) {
        Float currentOffset = blurOffset[i];
        Float currentWeight = blurWeight[i];
        for (j in 0 ... $BLUR_LENGTH) {
            color += texture(uniform_Texture, vector2(blurOffset[j], currentOffset)).rgb * blurWeight[j] * currentWeight;
        }
    }
    Float luminance = dot(color, lumcoeff);
    out_Color.r = mix(1.0, -1.3, luminance);
    out_Color.a = uniform_Alpha;
}

outputs(0 Vector4 out_Color);