property Int RESOLUTION;
property Int TEXTURES;

uniform 0 Matrix4 uniform_ModelViewMatrix;
uniform 1 Matrix4 uniform_ModelViewProjectionMatrix;
uniform 3 Texture2[TEXTURES * 4] uniform_Texture;
uniform 4 Vector3 uniform_FogColor;
uniform 5 Float uniform_FogEnd;
uniform 6 Vector4 uniform_Brightness;
uniform 7 Vector4 uniform_SunlightBrightness;
uniform 8 Vector3 uniform_SunlightNormal;
uniform 9 Vector2 uniform_CamPos;
uniform 10 Float[TEXTURES] uniform_Blend;

const Float SCALE = float(RESOLUTION - 2) / float(RESOLUTION);
const Float OFFSET = 1.0 / float(RESOLUTION);

shader vertex(0 Vector4 attribute_Position,
              1 Vector4 attribute_Color,
              2 Vector2 attribute_Texture) {
    varying_Texture = attribute_Texture + uniform_CamPos;
    varying_Color = attribute_Color * uniform_Brightness;
    varying_Depth = length((uniform_ModelViewMatrix * attribute_Position).xyz);
    out_Position = uniform_ModelViewProjectionMatrix * attribute_Position;
}

shader fragment(Vector4 varying_Color,
                Vector2 varying_Texture,
                Float varying_Depth) {
    Vector4 textureData = vector4(0.0);
    for (i in 0 ... TEXTURES) {
        if (varying_Texture.x > 1.0) {
            if (varying_Texture.y > 1.0) {
                textureData += texture(uniform_Texture[3 + i * 4], (varying_Texture + vector2(-1.0, -1.0)) * SCALE + OFFSET) * uniform_Blend[i];
            } else {
                textureData += texture(uniform_Texture[1 + i * 4], (varying_Texture + vector2(-1.0, 0.0)) * SCALE + OFFSET) * uniform_Blend[i];
            }
        } else if (varying_Texture.y > 1.0) {
            textureData += texture(uniform_Texture[2 + i * 4], (varying_Texture + vector2(0.0, -1.0)) * SCALE + OFFSET) * uniform_Blend[i];
        } else {
            textureData += texture(uniform_Texture[0 + i * 4], (varying_Texture + vector2(0.0, 0.0)) * SCALE + OFFSET) * uniform_Blend[i];
        }
    }

    Float light = dot(textureData.xyz, uniform_SunlightNormal) * 0.5 + 0.5;
    Vector4 color = mix(varying_Color * uniform_Brightness,
        uniform_SunlightBrightness, light);
    color.rgb *= 1.0 - 0.8 * textureData.a * textureData.a;

    Float fog = min(varying_Depth / uniform_FogEnd, 1.0);
    out_Color.rgb = mix(color.rgb, uniform_FogColor, fog);

    out_Color.a = min(textureData.a * 2.0, 1.0) * color.a;
}

outputs(0 Vector4 out_Color);